#! /usr/bin/bash
TABLE=data/database1/table1
COLUMN_DELIMITER=:
COLUMN_INFO_DELIMITER=,
declare -a TABLE_DATA
TABLE_DATA[1]=
TABLE_DATA[2]=0
TABLE_DATA[3]=1995-12-14
insert() {
: '
	this is a function takes refined data in correct order using array in this syntax TABLE_DATA[column_number] ="insert_data"
	then checks the data to follow the constraints
	and then writes it into the table file using specific delimiter
'
	if ( chk_table );then
		IFS=$COLUMN_DELIMITER; echo "${TABLE_DATA[*]}" >> "$TABLE" && return 0
	else
		return $?
	fi
}
chk_column() {
: '
	this function takes 3 arguments 
	$1 the full metadata 
	$2 is the index of the column we want to check
    $3 is the data we want to enter in this field	
'
	local COLUMN_INFO=($( cut -d"$COLUMN_INFO_DELIMITER" \
		-f 1,2,3 --output-delimiter=' '<<< $( cut -d"$COLUMN_DELIMITER" -f $2 <<< $1 )))
	chkdatatype ${COLUMN_INFO[1]} $3 && \
		chkprimarykey "${COLUMN_INFO[2]}" "$2"  "$3" \
		&& return 0 || return $? 
}
load_metadata() {
: '
	this function loads metadata of the required table
'
	echo $( head -n 1 $TABLE )
	
}

chkprimarykey() {
: '
	this function checks for primarykey entry duplication
	$1 the column metadata primarykey field flag
	$2 the index of the column (column number)
	$3 the data we want to check for duplication
'
	if [ -n "$1" ]&&[ $1 = "pk" ]; then
		[ -n "$3" ] || 
			{ echo primary key must have nonzero value; return 1; }
		for cell  in $( cut -d$COLUMN_DELIMITER -f $2 $TABLE | tail -n +2 ); do
			[ $cell != $3 ] ||\
				{ echo "primary key must have a unique value"; return 2; }
		done
		return 0
	fi

}

chkdatatype(){
: '
	this function checks for the datatype constraints
	$1 the column metadata for the datatype
	$2 the data that is checked 
'
	case $1 in 
		"text")
			return 0
		;;
		"date")
			[[ $2 =~ ^([0-9]{4}-(0[0-9]|1[0-2]){1}-(([0-2][0-9])|(3[0-1])))*$ ]] &&\
			return 0 ||\
			{ echo "please enter a valid entry for date datatype";return 21; }
		;;
		"int")
			[[  "$2" =~  ^[0-9]*$  ]] \
			&& return 0  ||\
			{ echo "please enter a valid entry for int datatype";return 22; }
		;;
		"*")
			return 23
	esac
}

chk_table() {
: '
	this function checks for all the data that
	we want to insert into a new row
	TABLE_DATA[column_number] ="insert_data_per_column"
'
	local METADATA=$(load_metadata)
	for i in "${!TABLE_DATA[@]}" ;do
		chk_column $METADATA $i ${TABLE_DATA[$i]} || return $?
	done
	return 0
}
insert