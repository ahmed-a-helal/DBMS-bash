#!/bin/bash

source $(dirname $0)/modules/querytable
source $(dirname $0)/modules/checks
source $(dirname $0)/modules/where
source $(dirname $0)/modules/formats
source $(dirname $0)/modules/colorcodes
source $(dirname $0)/modules/custom_read
source $(dirname $0)/modules/menu
update_me=""
function gathering(){
#getting table name and target column to update and its new value

custom_read -p "Please enter the Table name : " || return $?

chk_table_name $readout || return $?

TABLE=$readout

#declare COLUMN_INFO=($( load_column_info $(load_metadata) $COLUMN_NO ))

#METADATA=$(load_metadata)

    echo "which column u want to update"
         
         custom_read -p ">>" || return $?
         
         update_me=$readout
     
         METADATA=$(load_metadata)    
   
        if [ -z "$update_me" ]; then
    	echo "please enter a column not nothing"
        
        return 179
    
        elif ( [[ "$update_me" =~ ^[1-9]+[0-9]*$ ]] && [ $readout -le $(get_max_columns_no  $METADATA  ) ] ); then
        echo "u entered a valid column "
        else
        echo -e "${RED}Please enter a correct input${ENDCOLOR}"
        return 555

        fi
    
declare COLUMN_INFO=($( load_column_info $(load_metadata) "$update_me" ))
    
       custom_read -p "insert the new value " ||return $?
       new_value=$readout
    
            case ${COLUMN_INFO[1]} in
        "int")
            chk_datatype ${COLUMN_INFO[1]} $new_value ||return $?
        ;;
        "date")
            chk_datatype ${COLUMN_INFO[1]} $new_value ||return $?
        ;;
        "text")
            chk_datatype ${COLUMN_INFO[1]} $new_value ||return $?
        ;;
        *)
            echo "sorry wrong data type"
            return 198
            esac
    
    
    # Check if updating primary key column
    
    if [ "${COLUMN_INFO[2]}" == "pk" ]; then
      
        # Get current values of primary key column
        primary_key_values=$(awk -F':' -v OFS=':' "NR>1 {print \$${update_me}}" "$TABLE")
        
        
        # Check if new value already exists in primary key column
       
        if echo "$primary_key_values" | grep -q "^$new_value$"; then
          
            echo -e "${RED}sorry but Value already exists in primary key column${ENDCOLOR}"
           
            return 1
        fi
    fi
    
    
    
    return 0


}



#update_table file "NR==1||NR==2||NR==5" 3 'gaed'

function condition_format() 
	{ 
		local variable=$( tee | sed "s/^/NR==/g" )
		echo ${variable[*]} | sed "s/ /||/g"
	}




Get_Rows() { 

      local RowsOfCondition	
      RowsOfCondition=$(where_fn $COLUMN_NO $CONDITION "$INPUT")

      local RC=$? 
      [ $RC -eq 0 ] && [ -n "$RowsOfCondition" ] && variable=$(echo "$RowsOfCondition" | increment_fn | condition_format) || { echo $RowsOfCondition; return $RC; }

    }
    
function update_table {
    local input_file="$1"
    local condition="$2"
    local column="$3"
    local new_value="$4"
    local temp_file=$(mktemp)
    
    code="$condition { \$$column=\"$new_value\"}{ print }"
    awk -F':' -v OFS=':'  "$code" "$input_file" > "$temp_file"
    mv "$temp_file" "$input_file"
    
    echo "your columns successfully updated"
}
    
   
gathering && where_menu && Get_Rows && update_table $TABLE $variable $update_me "$new_value"	


