#! /usr/bin/bash
chk_unique() {
: '
	this function checks for Unique columns entry duplication
	$1 the index of the column (column number)
	$2 the data we want to check for duplication
'
	[ -n "$2" ] || 
		{ echo this column must have nonzero value; return 1; }
	for cell  in $( load_column $1 ); do
		[ $cell != $2 ] ||\
			{ echo -e "${RED}primary key column must have a unique value${ENDCOLOR}"; return 2; }
	done
	return 0

}

chk_datatype() {
: '
	this function checks for the datatype constraints
	$1 the column metadata for the datatype or the datatype string
	$2 the data that is checked 
'
	case $1 in 
		"text")
			return 0
		;;
		"date")
			[[ $2 =~ ^([0-9]{4}-(0[0-9]|1[0-2]){1}-(([0-2][0-9])|(3[0-1])))*$ ]] &&\
			return 0 ||\
			{ echo -e "${RED}please enter a valid entry for date datatype${ENDCOLOR}";return 21; }
		;;
		"int")
			[[ $2 =~ ^[0-9]*$ ]] \
			&& return 0  ||\
			{ echo  -e "${RED}please enter a valid entry for int datatype${ENDCOLOR}";return 22; }
		;;
		"*")
			return 23
		;;
	esac
}

chk_column() {
: '
	this function takes 2 arguments 
	$1 is the index of the column we want to check
    $2 is the data we want to enter in this field
	and has 2 VARIABLES that must be set beforehand
		"PKCOLUMN" is the column number of the primary key
		"METADATA" is the loaded metadata of the table
'
	declare -a COLUMN_INFO=($( load_column_info $METADATA $1))
	chk_datatype ${COLUMN_INFO[1]} $2 && {  
		[ $PKCOLUMN != $1  ]  || chk_unique "$1" "$2"; 
		} && return 0 || return $? 
}


chk_table_columns() {
: '
	this function checks for all the data that
	we want to insert into a new row
	TABLE_DATA[column_number] ="insert_data_per_column"
'
	for i in "${!TABLE_DATA[@]}" ;do
		chk_column $(($i+1)) ${TABLE_DATA[$i]} || return $?
	done
	return 0
}

chk_table_name() {
	[ -f "$1" ] && [ -w "$1" ] || {
	echo -e "${RED}The Table is nonexistent or doesn't have the right permissions to access it${ENDCOLOR}"
	return 50; }
}
