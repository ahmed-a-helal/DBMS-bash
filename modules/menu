#!/usr/bin/bash
show_menu() {
    local menu_headline="$;;;;;;;;$1;;;;;;;;"
    local lines=$(echo -e "$menu_headline" |add_lines '=')
    echo -e "${LIGHTBLUE}${lines}${ENDCOLOR}"
    echo -e "${LIGHTBLUE};;;;;;;;${ENDCOLOR}${GREEN}$1${ENDCOLOR}${LIGHTBLUE};;;;;;;;${ENDCOLOR}"
    echo -e "${LIGHTBLUE}${lines}${ENDCOLOR}"
    local i=1
    echo -e "${GREEN}Select one of the Following options${ENDCOLOR}"
    echo -e "${BLUE}-----------------------------------${ENDCOLOR}"
    for option in "${@:2}";do
        echo -e "$i. ${YELLOW} $option ${ENDCOLOR}"
        echo -e "${BLUE}----------${ENDCOLOR}"
        ((++i))
    done
    echo -e "${LIGHTBLUE}==========================================${ENDCOLOR}"
}

where_menu() {
    METADATA=$(load_metadata)
    echo "which column u want to apply where clause upon"
    echo -en "${Magenta} input enter or invalid column number to skip where clause {ENDCOLOR}"
    custom_read -p "which column u want to apply where clause upon "
    if [[ $readout =~ ^[:digit:]+& ]] && [ $readout -le $(echo $METADATA |get_max_columns_no ) ];then
        COLUMN_NO=$readout
    elif [ -n "$readout" ];then
        COLUMN_NO=$(echo -n "$METADATA" | Get_column_number_from_name $readout)
    else 
        return 0
    fi
    if [ -n "$COLUMN_NO" ];then
    declare -ga COLUMN_INFO=($( load_column_info $METADATA $COLUMN_NO ))
        case ${COLUMN_INFO[1]} in
        "date"|"int")
            show_menu "select the condition u want to apply" "1) \">\" greater than" \
                "2) \"<\" less than" "3) \"==\" equal" "4) \">=\" greater than or equal"\
                "5) \"<=\" less than or equal"
                custom_read -p ">>"
                case $readout in
                1)
                    CONDITION=">"
                    return 0
                ;;
                2)
                    CONDITION="<"
                    return 0
                ;;
                3)
                    CONDITION="=="
                    return 0
                ;;
                4)
                    CONDITION=">="
                    return 0
                ;;
                5)
                    CONDITION="<="
                    return 0
                ;;
                *)
                    echo -e "${RED}Please enter a correct input${ENDCOLOR}"
                    return 79
                ;;
                esac
        "text")
            show_menu "select the condition u want to apply" "1) exact match" "2) fuzzy match" \
                "3) exact match and case incensitive" "4) fuzzy match and case incensitive"\
                "5) exact invert match" "6) fuzzy invert match" \
                "7) exact invert match and case incensitive" "6) fuzzy invert match and case incensitive"
                custom_read -p ">>"
                case $readout in
                1)
                    CONDITION="-x"
                    return 0
                ;;
                2)
                    CONDITION="-e"
                    return 0
                ;;
                3)
                    CONDITION="-ix"
                    return 0
                ;;
                4)
                    CONDITION="-ie"
                    return 0
                ;;
                5)
                    CONDITION="-vx"
                    return 0
                ;;
                6)
                    CONDITION="-ve"
                    return 0
                ;;
                7)
                    CONDITION="-vix"
                    return 0
                ;;
                8)
                    CONDITION="-vie"
                    return 0
                ;;
                *)
                    echo -e "${RED}Please enter a correct input${ENDCOLOR}"
                    return 79
                ;;
                esac

        ;;
        esac

    fi
    show_menu "select which condition" "Create Database" "Drop Database" "Connect to Database" "List Databases" "QUIT"

}

DDL_menu() {
    show_menu "Welcome to our DBMS_BASH" "Create Database" "Drop Database" "Connect to Database" "List Databases" "QUIT"
    while [ 1 -eq 1 ]; do
        custom_read -p ">>" && case ${readout,,} in 
            "1"|"create")
                bash ../create_database
            ;;
            "2"|"drop"|"delete"|"remove")
                bash ../delete_database
            ;;
            "3"|"connect")
                #source ../connect_to_database
                source ../connect \
                && { DML_menu
                cd ..
                show_menu "Welcome to our DBMS_BASH" "Create Database" "Drop Database" "Connect to Database" "List Databases" "QUIT"
                }
            ;;
            "4"|"list"|"ls")
                ls  --file-type . | grep "/" |tr -d "/" 
            ;;
            "5"|"quit"|"exit"})
                echo GoodBye
                break
            ;;
            *) 
            echo -e "${RED}Please enter a correct input${ENDCOLOR}"
            ;;
        esac
    done
}
DML_menu() {
local DATABASE=$(pwd|sed "s|^.*/||g")
    show_menu "Welcome To Database $DATABASE" "Create TABLE" "Drop TABLE" "Delete Table" "list Tables" "Insert into table" "Update table" "Truncate Table" "disconnect from database" "quit"
    while [ 1 -eq 1 ]; do
        custom_read -p ">>" && case ${readout,,} in 
            "1"|"create")
                bash ../../create_table
            ;;
            "2"|"drop")
                echo "dropping"
            ;;
            "3"|"delete")
                bash ../../create_database
            ;;
            "4"|"list"|"ls")
                ls --file-type . | grep -v "/|@"
            ;;
            "5"|"insert")
                bash ../../insert && echo -e "The Data has been inserted ${GREEN}sucessfully${ENDCOLOR}"
            ;;
            "6"|"update")
                echo "Updating"
            ;;
            "7"|"truncate")
                echo "truncating"
            ;;
            "8"|"disconnect")
                echo -e "${MAGENTA}disconnecting${ENDCOLOR}"
                break
            ;;
            "9"|"quit"|"exit")
                echo -e "${MAGENTA}GOODBYE${ENDCOLOR}"
                exit 0
            ;;
            *) 
            echo -e "${RED}Please enter a correct input${ENDCOLOR}"
            ;;
        esac
    done
}
